import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:free_malware_detection/home/views/views.dart';
import 'package:free_malware_detection/home/widgets/widgets.dart';

import 'package:free_malware_detection/main.dart';
import 'package:freerasp/freerasp.dart';

/// The home page that displays the threats and results
class HomePage extends ConsumerWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final threatState = ref.watch(threatProvider);

    return Scaffold(
      appBar: AppBar(title: const Text('freeMalwareDetection Demo')),
      body: SafeArea(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const StatusTile(
                title: '.freeRASP',
                subtitle: 'Up and running',
                icon: Icons.check_circle_outline_rounded,
                iconColor: Colors.green,
              ),
              StatusTile(
                title: '.freeMalwareDetection',
                subtitle: threatState.isDetected ? 'Scan done' : 'Scan running',
                icon: threatState.isDetected
                    ? Icons.check_circle_outline_rounded
                    : Icons.sync_outlined,
                iconColor:
                    threatState.isDetected ? Colors.green : Colors.orange,
                isSpinning: !threatState.isDetected, // Spins if scan is running
              ),
              Visibility(
                visible: threatState.isDetected,
                child: OutlinedButton(
                  onPressed: () => _showMalwareBottomSheet(
                    context,
                    threatState.detectedMalware.toList(),
                    ref,
                  ),
                  child: Text(
                    'Show Results'.toUpperCase(),
                    style: Theme.of(context).textTheme.labelLarge,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

void _showMalwareBottomSheet(
  BuildContext context,
  List<SuspiciousAppInfo> suspiciousApps,
  WidgetRef ref,
) {
  WidgetsBinding.instance.addPostFrameCallback((_) {
    showModalBottomSheet<void>(
      context: context,
      isDismissible: false,
      enableDrag: false,
      isScrollControlled: true,
      builder: (BuildContext context) => MalwareBottomSheet(
        suspiciousApps: suspiciousApps,
        onDismiss: () => Navigator.pop(context),
      ),
    );
  });
}
